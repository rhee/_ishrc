if [ "Darwin" != "$(uname -s)" ]; then return; fi

# begin some common mac osx

alias mac-rsync-with-linux='rsync --iconv=utf-8-mac,utf-8'

alias mac-rsync=_mac_rsync
_mac_rsync(){(
    rsync --iconv=utf-8-mac,utf-8 "$@" || \
	rsync "$@"
)}

alias mac-convmv-to-normal='convmv -r -f utf-8 -t utf-8 --nfc --notest'
alias mac-convmv-from-normal='convmv -r -f utf-8 -t utf-8 --nfd --notest'

alias mac-clear-history=_mac_clear_history
_mac_clear_history(){(
  app=${1}
  if [ -z "$app" -o ! -d "$app" ]; then
    echo "Usage: _mac_clear_history [--all|<apppath>]"
  elif [ "--all" = "$app" ]; then
    rm -fv ~/Library/Preferences/*LSSharedFileList.plist
    #defaults delete NSGlobalDomain NSNavRecentPlaces
    defaults delete -g NSNavRecentPlaces
    defaults write -g NSNavRecentPlacesLimit -int 0
  else
    bundle=$(defaults read $app/Contents/Info CFBundleIdentifier)
    defaults delete $bundle.LSSharedFileList RecentDocuments
    defaults write $bundle NSRecentDocumentsLimit 0
    defaults write $bundle.LSSharedFileList RecentDocuments -dict-add MaxAmount 0
  fi
)}

#:::::::::::::::::::::::::

alias mac-wifi-off=_mac_wifi_off
_mac_wifi_off(){(
  intf=${1-en1}
  LC_ALL=C networksetup -setairportpower $intf off
)}

alias mac-wifi-on=_mac_wifi_on
_mac_wifi_on(){(
  intf=${1-en1}
  LC_ALL=C networksetup -setairportpower $intf on
)}

alias mac-airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport'
alias mac-wifi-scan='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport scan'

alias mac-wifi-connected='_mac_wifi_connected && echo true'
_mac_wifi_connected(){(
  bssid=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I | awk '/ BSSID: /{print$2}')
  test "0:0:0:0:0:0" != "$bssid"
)}

alias mac-wifi-reconnect-if-disconnected=_mac_wifi_reconnect_if_disconnected
# make this as a script, and then run
# every 5 minutes using cron table
_mac_wifi_reconnect_if_disconnected(){(

  #!/bin/sh
  LC_ALL=C
  export LC_ALL

  # wifi interface
  intf=en1

  # airport binary executable
  airport=/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport

  # get current connected AP bssid
  bssid=$($airport -I | awk '/ BSSID: /{print $2}')

  # if not connected, try reconnect
  if [ "0:0:0:0:0:0" = "$bssid" ]; then
    /usr/sbin/networksetup -setairportpower "$intf" off
    /usr/sbin/networksetup -setairportpower "$intf" on
  fi

)}


alias mac-wifi-join=_mac_wifi_join
_mac_wifi_join(){(
  if [ -z "$2" ]; then echo "Usage: _mac_wifi_join <ssid> <pass> [<interface>]" 1>&2; return; fi
  ssid="$1"
  pass="$2"
  intf=${3-en1}
  networksetup -setairportnetwork $intf "$ssid" "$pass"
)}

alias mac-list-network-interfaces='networksetup -listallhardwareports'

#:::::::::::::::::::::::::

alias mac-get-volume='LC_ALL=C osascript -e "output volume of (get volume settings)"'

alias mac-set-volume=_mac_set_volume
_mac_set_volume(){
  LC_ALL=C osascript -e "set volume output volume $1"
}

alias mac-get-mute='LC_ALL=C osascript -e "output muted of (get volume settings)"'

# 'true' or 'false'
alias mac-set-mute=_mac_set_mute
_mac_set_mute(){(
  true_or_false=$1
  LC_ALL=C osascript -e "set volume output muted $true_or_false"
)}

alias mac-get-selected-speaker='SwitchAudioSource -c'
alias mac-select-next-speaker='SwitchAudioSource -n;SwitchAudioSource -c'


alias mac-freemem=_mac_freemem
_mac_freemem(){
  python - "$@" <<-'EOB'
#!/usr/bin/python

import subprocess
import re

# Get process info
ps = subprocess.Popen(['ps', '-caxm', '-orss,comm'], stdout=subprocess.PIPE).communicate()[0]
vm = subprocess.Popen(['vm_stat'], stdout=subprocess.PIPE).communicate()[0]

# Iterate processes
processLines = ps.split('\n')
sep = re.compile('[\s]+')
rssTotal = 0 # kB
for row in range(1,len(processLines)):
    rowText = processLines[row].strip()
    rowElements = sep.split(rowText)
    try:
        rss = float(rowElements[0]) * 1024
    except:
        rss = 0 # ignore...
    rssTotal += rss

# Process vm_stat
vmLines = vm.split('\n')
sep = re.compile(':[\s]+')
vmStats = {}
for row in range(1,len(vmLines)-2):
    rowText = vmLines[row].strip()
    rowElements = sep.split(rowText)
    vmStats[(rowElements[0])] = int(rowElements[1].strip('\.')) * 4096

print 'Wired Memory:\t\t%d MB' % ( vmStats["Pages wired down"]/1024/1024 )
print 'Active Memory:\t\t%d MB' % ( vmStats["Pages active"]/1024/1024 )
print 'Inactive Memory:\t%d MB' % ( vmStats["Pages inactive"]/1024/1024 )
print 'Free Memory:\t\t%d MB' % ( vmStats["Pages free"]/1024/1024 )
print 'Real Mem Total (ps):\t%.1f MB' % ( rssTotal/1024/1024 )
EOB
}

# mac os el capitan do not permit me to change
# symlink in /usr/bin/vi /usr/bin/vim, so I
# must set EDITOR environment variable to work-around

if [ -x /usr/local/bin/vim ]; then
    EDITOR=/usr/local/bin/vim
    export EDITOR
fi

#alias mac-faster-keyboard='defaults write NSGlobalDomain KeyRepeat -int 0'
alias mac-faster-keyboard='defaults write NSGlobalDomain KeyRepeat -int 1'

alias mac-sysinfo='(uname -a; sw_vers; system_profiler) |less'
alias mac-pbcopy=pbcopy
alias mac-pbpaste=pbpaste
alias mac-mdfind=mdfind

alias mac-lockscreen='/System/Library/CoreServices/"Menu Extras"/User.menu/Contents/Resources/CGSession -suspend'
alias mac-sleep-1='echo pmset sleepnow'
alias mac-sleep-2='echo osascript -e '"'"'tell application "Finder" to sleep'"'"''
alias mac-sleep-3='echo osascript -e '"'"'tell application "System Events" to sleep'"'"''
alias mac-secure-rm=srm
alias mac-lsbom=lsbom
alias mac-say=say
alias mac-softwareupdate=softwareupdate
alias mac-lipo=lipo
alias mac-screencapture=screencapture
alias mac-sips=sips
alias mac-verify-packages='sudo sudo /usr/libexec/repair_packages --verify --standard-pkgs /'
alias mac-repair-packages='sudo /usr/libexec/repair_packages --repair --standard-pkgs --volume /'
alias mac-nvram-print='nvram -xp'
alias mac-nvram-delete='nvram -d '
alias mac-mkfile=mkfile
alias mac-dsenableroot=dsenableroot

alias mac-quit-app=_mac_quit_app
_mac_quit_app(){(
  app="$1"
  osascript -e 'quit app "$app"'
)}

alias mac-wifi-password=_mac_wifi_password
_mac_wifi_password(){(
  your_router="$1"
  security find-generic-password -ga "$your_router"
)}

if [ "Darwin" = "$(uname -s)" -a -d /opt/local/bin ];then
  alias mac-enable-macport='PATH=/opt/local/bin:$PATH;export PATH'
fi
