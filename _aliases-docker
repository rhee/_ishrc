:

if \podman -v >/dev/null 2>&1
then

    local extra_podman_volumes=()

    test -d /Users && extra_podman_volumes+=("--volume" "/Users:/Users")
    test -d /private && extra_podman_volumes+=("--volume" "/private:/private")
    test -d /var/folders && extra_podman_volumes+=("--volume" "/var/folders:/var/folders")
    test -d /Volumes && extra_podman_volumes+=("--volume" "/Volumes:/Volumes")
    test -d /Volumes/EXT && extra_podman_volumes+=("--volume" "/Volumes/EXT:/Volumes/EXT")
    test -d /Volumes/MGTEC && extra_podman_volumes+=("--volume" "/Volumes/MGTEC:/Volumes/MGTEC")
    test -d /Volumes/250330 && extra_podman_volumes+=("--volume" "/Volumes/250330:/Volumes/250330")

    _podman_start() { (
        podman machine ssh podman-machine-default uptime >/dev/null 2>&1 || (
          podman machine inspect podman-machine-default >/dev/null 2>&1 || (
            podman machine stop podman-machine-default >/dev/null 2>&1
            podman machine rm podman-machine-default >/dev/null 2>&1
            podman machine init "${extra_podman_volumes[@]}"
          )
          podman machine start podman-machine-default
        )
    ) }

fi


if \docker -v >/dev/null 2>&1
then

    DOCKER_CMD="docker"

elif \podman -v >/dev/null 2>&1
then

    _podman_start || return 0

    DOCKER_CMD="podman"
    alias docker="$DOCKER_CMD"

fi

"$DOCKER_CMD" -v >/dev/null 2>&1 || return 0

alias docker-clear=_docker_clear
_docker_clear(){(

    CMD="$DOCKER_CMD"

    if [ "--aggressive" = "$1" ]; then
	aggressive=yes
    fi

    if [ xyes = x$aggressive ]; then
	# rm if not running
	containers=$( $CMD ps -a -q )
	[ -z "$containers" ] || $CMD rm $containers
    fi

    if [ xyes = x$aggressive ]; then
	# volume rm if not used
	volumes=$( $CMD volume ls -q )
	[ -z "$volumes" ] || $CMD volume rm $volumes
    fi

    # rmi if no tag
    images=$( $CMD images | awk '/<none>/{print$3}' )
    [ -z "$images" ] || $CMD rmi $images

    if [ xyes != x$aggressive ]; then
	echo "docker_clear completed: re-run with --aggressive option to clear stopped ps and volumes too" 1>&2
    fi

)}

alias docker-ipaddr='"$DOCKER_CMD" inspect --format "{{.NetworkSettings.IPAddress}}"'

alias docker-run='"$DOCKER_CMD" run -ti'

alias docker-exec=_docker_exec
_docker_exec(){(
  container="$1"; shift
  cmd="$1"; shift
  "$DOCKER_CMD" exec -ti "$container" "${cmd-/bin/sh}" "$@"
)}

alias docker-rm='"$DOCKER_CMD" rm -f'

alias docker-logs='_docker-logs '
_docker-logs(){
    ## 처음 1회는 failsafe 없이 실행
    "$DOCKER_CMD" logs --follow --tail=50 "$@" && \
    while :
    do
        sleep 15
        "$DOCKER_CMD" logs --follow --tail=50 "$@"
    done
}

alias docker-ps='"$DOCKER_CMD" ps -a --format "{{.ID}}\t{{printf \"%29s:\" .Names}}\t{{printf \"%39s\" .Image}}\t    {{.Status}}"'

alias docker-clear-images='"$DOCKER_CMD" rmi $("$DOCKER_CMD" images -a --filter=dangling=true -q)'
alias docker-clear-ps='"$DOCKER_CMD" rm $("$DOCKER_CMD" ps --filter=status=exited --filter=status=created -q)'

alias docker-clear-log=_docker_clear_log
_docker_clear_log(){(
  container="$1"
  echo "" > "$("$DOCKER_CMD" inspect --format='{{.LogPath}}' "$container")"
)}

alias docker-children='_docker-children'
_docker-children(){
    local id="$1"
    for i in $("$DOCKER_CMD" images -q)
    do
        "$DOCKER_CMD" history $i | grep -q "$id" && echo $i
    done | sort -u
}

### for docker by VBoxManager
alias docker-vbox-listnat='VBoxManage showvminfo default |grep NIC'

alias docker-vbox-nat=_docker_vbox_nat
_docker_vbox_nat(){
    VBoxManage controlvm default natpf1 tcp-$1,tcp,,$1,,$1
}

alias docker-vbox-unnat=_docker_vbox_unnat
_docker_vbox_unnat(){
    VBoxManage controlvm default natpf1 delete tcp-$1
}

alias docker-vbox-nat-udp=_docker_vbox_nat_udp
_docker_vbox_nat_udp(){
    VBoxManage controlvm default natpf1 udp-$1,udp,,$1,,$1
}

alias docker-vbox-unnat-udp=_docker_vbox_unnat_udp
_docker_vbox_unnat_udp(){
    VBoxManage controlvm default natpf1 delete udp-$1
}

### NV docker
alias nv-docker='_nv-docker'
_nv-docker(){(
docker run \
    --device /dev/nvidia0:/dev/nvidia0 \
    --device /dev/nvidia0:/dev/nvidia1 \
    --device /dev/nvidia0:/dev/nvidia2 \
    --device /dev/nvidia0:/dev/nvidia3 \
    --device /dev/nvidiactl:/dev/nvidiactl \
    --device /dev/nvidia-uvm:/dev/nvidia-uvm \
    "$@"
)}

### dockviz https://github.com/justone/dockviz
# if docker client using local unix socket
alias dockviz=""$DOCKER_CMD" run -it --rm -v /var/run/docker.sock:/var/run/docker.sock nate/dockviz"

## # if docker client using tcp
## alias dockviz=""$DOCKER_CMD" run -it --rm -e DOCKER_HOST='tcp://127.0.0.1:2375' nate/dockviz"
