:
docker -v >/dev/null 2>&1 || return 0

if ! docker ps -q >/dev/null 2>&1
then
  docker-machine -v 2>/dev/null && \
  test -z "$DOCKER_MACHINE_NAME" && \
  eval $(docker-machine env) >/dev/null 2>&1
  return 1
fi

alias docker-clear=_docker_clear
_docker_clear(){(

    CMD='docker'

    if [ "--aggressive" = "$1" ]; then
	aggressive=yes
    fi

    if [ xyes = x$aggressive ]; then
	# rm if not running
	containers=$( $CMD ps -a -q )
	[ -z "$containers" ] || $CMD rm $containers
    fi

    if [ xyes = x$aggressive ]; then
	# volume rm if not used
	volumes=$( $CMD volume ls -q )
	[ -z "$volumes" ] || $CMD volume rm $volumes
    fi

    # rmi if no tag
    images=$( $CMD images | awk '/<none>/{print$3}' )
    [ -z "$images" ] || $CMD rmi $images

    if [ xyes != x$aggressive ]; then
	echo "docker_clear completed: re-run with --aggressive option to clear stopped ps and volumes too" 1>&2
    fi

)}

alias docker-ipaddr='docker inspect --format "{{.NetworkSettings.IPAddress}}"'

alias docker-run='docker run -ti'

alias docker-exec=_docker_exec
_docker_exec(){(
  container="$1"; shift
  cmd="$1"; shift
  docker exec -ti "$container" "${cmd-/bin/sh}" "$@"
)}

alias docker-rm='docker rm -f'

alias docker-logs='_docker-logs '
_docker-logs(){
    ## 처음 1회는 failsafe 없이 실행
    docker logs --follow --tail=50 "$@" && \
    while :
    do
        docker logs --follow --tail=50 "$@"
        sleep 15
    done
}

alias docker-ps='docker ps -a --format "{{.ID}}\t{{printf \"%29s:\" .Names}}\t{{printf \"%39s\" .Image}}\t    {{.Status}}"'

alias docker-clear-images='docker rmi $(docker images -a --filter=dangling=true -q)'
alias docker-clear-ps='docker rm $(docker ps --filter=status=exited --filter=status=created -q)'

alias docker-clear-log=_docker_clear_log
_docker_clear_log(){(
  container="$1"
  echo "" > "$(docker inspect --format='{{.LogPath}}' "$container")"
)}

alias docker-children='_docker-children'
_docker-children(){
    local id="$1"
    for i in $(docker images -q)
    do
        docker history $i | grep -q "$id" && echo $i
    done | sort -u
}

### for docker by VBoxManager
alias docker-vbox-listnat='VBoxManage showvminfo default |grep NIC'

alias docker-vbox-nat=_docker_vbox_nat
_docker_vbox_nat(){
    VBoxManage controlvm default natpf1 tcp-$1,tcp,,$1,,$1
}

alias docker-vbox-unnat=_docker_vbox_unnat
_docker_vbox_unnat(){
    VBoxManage controlvm default natpf1 delete tcp-$1
}

alias docker-vbox-nat-udp=_docker_vbox_nat_udp
_docker_vbox_nat_udp(){
    VBoxManage controlvm default natpf1 udp-$1,udp,,$1,,$1
}

alias docker-vbox-unnat-udp=_docker_vbox_unnat_udp
_docker_vbox_unnat_udp(){
    VBoxManage controlvm default natpf1 delete udp-$1
}

### docker dropbox aliases
if test ! -z "$(docker ps -q -f 'name=dropbox' 2>/dev/null)" ; then
  alias dropbox-status='docker exec dropbox /dropbox.sh status'
  alias dropbox-filestatus='docker exec dropbox /dropbox.sh filestatus'
fi

### NV docker
alias nv-docker='_nv-docker'
_nv-docker(){(
docker run \
    --device /dev/nvidia0:/dev/nvidia0 \
    --device /dev/nvidia0:/dev/nvidia1 \
    --device /dev/nvidia0:/dev/nvidia2 \
    --device /dev/nvidia0:/dev/nvidia3 \
    --device /dev/nvidiactl:/dev/nvidiactl \
    --device /dev/nvidia-uvm:/dev/nvidia-uvm \
    "$@"
)}

