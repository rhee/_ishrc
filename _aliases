:
\ls -F -w > /dev/null 2>&1 && alias ls='\ls -F -w' 
\ls -NF --show-control-chars --color=auto > /dev/null 2>&1 && \
  alias ls='\ls -NF --show-control-chars'

alias ll='ls -al'
alias lc='ls -NF --color=auto'
alias tF='sh -c '"'"'for f in "$@"; do echo "-F" "$f"; done |exec xargs tail'"'"' tF '

alias lsof='sudo lsof -n -P'

alias cp='\cp -i'
alias mv='\mv -i'
alias rm='\rm -i'
alias Copy='\rsync -e ssh -avP'
alias cpV='rsync --partial --progress --append'
alias mvV='rsync --partial --progress --append --remove-sent-files'

alias tart='tar tvvzf'
alias tarx='tar xvvzf'
alias tarc='tar cvvzf'

alias ko='export LANG=ko_KR.euckr'
alias u8='export LANG=ko_KR.utf8'

alias sl='screen -ls'
alias sx8='LANG=ko_KR.utf8 screen -U -x -r'

alias dC='d_=/tmp/dtach/$(id -u); mkdir -p $d_; env dC_sock_=$d_/sock dtach -c $d_/sock -z -r winch'
alias dA='d_=/tmp/dtach/$(id -u); if [ -S "$dC_sock_" ]; then echo "socket already attached"; else dtach -a $d_/sock -z -r winch; fi'

alias ldpkg='less /var/lib/dpkg/available'

alias w3x='w3m -v -no-proxy'
alias fwman='sh -c "exec w3m http://www.FreeBSD.org/cgi/man.cgi\?query=\$1" fwman'

alias unU='perl -p -e '"'"'tr/+/ /;s/%([0-9A-F]{2})/pack("C",hex($1))/egi;'"'"''
alias unX='perl -p -e '"'"'s/\\([0-9]{3})/chr($1)/egi;'"'"
alias enU='perl -p -e '"'"'s/([\200-\377])/sprintf("%%%02X",ord($1))/eg;'"'"

alias ipD='sh -c "echo \"obase=256; \$1\" |bc" ipD'

alias 6D='perl -MMIME::Base64 -p -e '"'"'tr/+/ /;s/%([0-9A-F]{2})/pack("C",hex($1))/egi;$_=decode_base64($_);'"'"
alias puE='python -c "import uuencode,sys; print uuencode.encode(sys.argv[1],sys.argv[2]);"'
alias puD='python -c "import uuencode,sys; print uuencode.decode(sys.argv[1],sys.argv[2]);"'
alias p6E='python -c "import base64,sys; print base64.encode(sys.argv[1],sys.argv[2]);"'
alias p6D='python -c "import base64,sys; print base64.decode(sys.argv[1],sys.argv[2]);"'
alias p6sE='python -c "import base64,sys; print len(sys.argv[1]),base64.encodestring(sys.argv[1]);"'
alias p6sD='python -c "import base64,sys; print len(sys.argv[1]),base64.decodestring(sys.argv[1]);"'

alias 47D='perl -MEncode -p -e '"'"'s/(=\?[^ \t]*)/encode("euc-kr",decode("MIME-Header",$1))/eg;'"'"''

alias dR='sh -c "for h in \$*; do tar c -f - -C ~ -L .bashrc .ishrc .aliases .vimrc .vim .emacs .gitconfig .screenrc .tmux.conf | ssh $h tar xvf -; done" dR'

alias rN='perl -e '"'"'$pat=shift@ARGV;for$f(@ARGV){eval"(\$ff=\$f)=~\$pat";$f ne$ff&&(!-f$ff&&rename $f,$ff&&print"rNF $f $ff\n"||warn "skip $f->$ff\n");}'"'"

alias xKS='xmodmap -e "remove Lock = Caps_Lock" -e "keycode 66 = Control_L" -e "add Control = Control_L" -e "keycode 9 = Escape asciitilde"'
alias xKs='xmodmap -e "remove Control = Control_L" -e "keycode 66 = Caps_Lock" -e "add Lock = Caps_Lock" -e "add Control = Control_L" -e "keycode 9 = Escape"'
alias xKM='xmodmap -e "clear Mod1" -e "clear Mod4" -e "keycode 64 = Alt_L" -e "keycode 49 = Alt_L" -e "keycode 115 = grave asciitilde" -e "add Mod1 = Alt_L Alt_R" -e "add Mod4 = Meta_L Meta_R"'
alias xKm='xmodmap -e "clear Mod1" -e "clear Mod4" -e "keycode 64 = Alt_L" -e "keycode 49 = grave asciitilde" -e "keycode 115 = Meta_L" -e "add Mod1 = Alt_L Alt_R" -e "add Mod4 = Meta_L Meta_R"'
alias xKW='xmodmap -e "remove mod1 = Alt_L" -e "remove mod4 = Super_L" -e "keycode 133 = Alt_L" -e "keycode 64 = Super_L" -e "add mod1 = Alt_L" -e "add mod4 = Super_L"'
alias xKw='xmodmap -e "remove mod1 = Alt_L" -e "remove mod4 = Super_L" -e "keycode 133 = Super_L" -e "keycode 64 = Alt_L" -e "add mod1 = Alt_L" -e "add mod4 = Super_L"'

alias lrgb='less /etc/X11/rgb.txt'

alias  xtN='sh -c "echo -n \"@]1;\$1%\"|sed -e '"'"'y/@%//'"'"'" xtN'
alias xtT_='sh -c "echo -n \"@]2;\$1%@]1;\$1%\"|sed -e '"'"'y/@%//'"'"'" xtT'
alias  xtT='sh -c "echo -n \"@]2;\$1%@]1;\$1%\"|sed -e '"'"'y/@%//'"'"'" xtT'

if printf 1 >/dev/null 2>&1 ; then

    alias xtC=_xtC
    _xtC(){(
	osc="\e]" # or 0x9d
	fg=$1
	bg=$2
	printf "${osc}10;${fg}\007""\e]11;${bg}\007"
    )}
    alias xtS=_xtS
    _xtS(){(
	csi="\e[" # or 0x9b
	lines=$1
	columns=$2
	printf "${csi}8;${lines};${columns}t"
    )}

else

    alias xtC='sh -c "echo -n \"@]10;\$1%@]11;\$2%\"|sed -e '"'"'y/@%//'"'"'" xtC'
    alias xtS='sh -c "echo -n \"@[8;\$1;\$2t\"|sed -e '"'"'y/@%//'"'"'" xtS'

fi

alias xtcW89='xtC rgb:00/00/00 rgb:e0/e0/e0; xtS 27 89'
alias xtcB89='xtC black rgb:d0/d0/ff; xtS 27 89'
alias xtcG89='xtC black rgb:e0/ff/e0; xtS 27 89'
alias xtcR89='xtC black rgb:ff/e0/e0; xtS 27 89'
alias xtcW137='xtC rgb:00/00/00 rgb:e0/e0/e0; xtS 39 137'
alias xtcB137='xtC black rgb:d0/d0/ff; xtS 39 137'

alias rM='sh -c "mkdir -p $HOME/.Trash; /bin/mv \$* $HOME/.Trash" rM'
alias mkclean='echo -n "Purge " .#* *~ .??*~ " ?"; read ans; case "$ans" in [Yy]*) rm -fvr .\#* *~ .??*~; ;; esac'
alias mkxclean='xf=${TMP:-/tmp}/mkxc-$$; echo "Purge-recursively:"; /usr/bin/find -L . -name .\#\* -o -name \*~ -o -name .\?\?\*~ |tee $xf; echo "Purge above files?"; read ans; case "$ans" in [Yy]*) xargs rm -fvr $xf < $xf; ;; esac'

alias zap='perl -e "truncate \$ARGV[0],0"'

#alias mpPP='sh -c '\''exec mplayer -autoq 100 -vf pp=de,hqdn3d,scale -vo vdpau -vfm ffmpeg -fs -shuffle -quiet "$@" </dev/null'\'' mpPP'
#alias mpq='sh -c '\''exec mplayer -noconfig user -quiet -osdlevel 3 -shuffle -ao pulse -vo gl_nosw "$@" </dev/null'\'' mpq'
alias mpPP='sh -c '\''exec mplayer -autoq 100 -vf pp=de,hqdn3d,scale -vfm ffmpeg -fs -shuffle -quiet "$@" </dev/null'\'' mpPP'
alias mpq='sh -c '\''exec mplayer -noconfig user -quiet -osdlevel 3 -shuffle -ao pulse "$@" </dev/null'\'' mpq'

alias efence='LD_PRELOAD=/usr/lib/libefence.so EF_PROTECT_BELOW=0'
alias underfence='LD_PRELOAD=/usr/lib/libefence.so EF_PROTECT_BELOW=1'
alias guard='DYLD_INSERT_LIBRARIES=/usr/lib/libgmalloc.dylib'
alias underguard='DYLD_INSERT_LIBRARIES=/usr/lib/libgmalloc.dylib MALLOC_PROTECT_BEFORE=1'
alias valddd='valgrind --db-attach=yes --db-command="ddd %f %p" '

lssources(){(
  not=""
  action="-print"
  optdone="no"
  while [ ! "xyes" = "x$optdone" ]; do
    case "$1" in
      -not) shift ; not="!" ;;
      -rm) shift ; action="-delete" ;;
      -0) shift ; action="-print0" ;;
      *) optdone=yes ;;
    esac
  done
  for f in "${@:-.}"; do
    find -L "$f" -type f $not \( -false \
      -o -iname '*.h' -o -iname '*.c' -o -iname '*.hpp' -o -iname '*.cpp' \
      -o -iname '*.inc' -o -iname '*.s' -o -iname '*.asm' \
      -o -iname '*.m' -o -iname '*.mm' \
      -o -iname '*.py' -o -iname '*.pyw' \
      -o -iname '*.ml' \
      -o -iname '*.mak' -o -iname 'makefile' -o -iname 'kbuild' \
      -o -iname '*.java' -o -iname '*.jsp' \
      -o -iname '*.js' -o -iname '*.css' -o -iname '*.html' -o -iname '*.htm' -o -iname '*.php' \
      -o -iname '*.pde' -o -iname '*.ino' \
    \) $action
  done
)}

alias xG='lsS -0 | sh -c "tmpdir=\${TMP:-\${HOME}/tmp}; mkdir -p \${tmpdir}; log=\${tmpdir}/xG$$; xargs -0 grep -n \${1+\"\$@\"} /dev/null | sed '"'"'s&^\./&&'"'"' | tee \${log}" xG'

alias vG='sh -c "tmpdir=\${TMP:-\${HOME}/tmp}; mkdir -p \${tmpdir}; log=\${tmpdir}/xG$$; ( [ ! -z \"\${TERM}\" -a \"dumb\" != \"\${TERM}\" ] && vim -q \${log} -c cl) || cat \${log}" vG'
alias lsS='lssources'

alias yG='sh -c "tmpdir=\${TMP:-\${HOME}/tmp}; mkdir -p \${tmpdir}; log=\${tmpdir}/xG$$; cat -d ./.yginput |xargs grep -n \${1+\"\$@\"} /dev/null |tee \${log}" xG'
alias yG0='sh -c "tmpdir=\${TMP:-\${HOME}/tmp}; mkdir -p \${tmpdir}; log=\${tmpdir}/xG$$; cat ./.yginput |xargs grep -n \${1+\"\$@\"} /dev/null |tee \${log}" xG'

alias lsR~='/usr/bin/find . \( -name '"'"'*~'"'"' -o -name '"'"'#*'"'"' \) '
alias rmR~='/usr/bin/find . \( -name '"'"'*~'"'"' -o -name '"'"'#*'"'"' \) -print0 |xargs -0 rm -fv '

which exuberant-ctags >/dev/null 2>&1 || alias exuberant-ctags=ctags
which ctags-exuberant > /dev/null 2>&1 && alias exuberant-ctags=ctags-exuberant

alias mT='CTAGSROOT=$PWD; export CTAGSROOT; lsS |exuberant-ctags --langmap=c++:+.ino,java:+.pde -L - -o tags.ctags'
alias mTE='CTAGSROOT=$PWD; export CTAGSROOT; lsS |exuberant-ctags --langmap=c++:+.ino,java:+.pde -e -L - -o TAGS'
alias fN='/usr/bin/find -L . -iname'
alias fnG='sh -c '"'"'dirname -L $(/usr/bin/find . -iname $1|head -1)'"'"' fnG'
alias vF='sh -c '"'"'pattern=$1; shift; exec vim $(/usr/bin/find -L . -iname "$pattern") "$@"'"'"' vF'

alias mutt='LANG=ko_KR.utf8 LC_ALL=ko_KR.utf8 mutt -n -f $HOME/Maildir'
alias muttkr='LANG=ko_KR.eucKR LC_ALL=ko_KR.eucKR mutt -F $HOME/.muttrc-euckr'

alias capmmf='sh -c '"'"'mplayer.static -vo null -ao null -dumpfile "cap_$(basename $1)" -dumpstream "$1"'"'"' capmmf'

alias tnowrap='setterm -linewrap off'
alias curon='setterm -cursor on'
alias no-screen-saver='setterm -blank 15 -powersave powerdown -powerdown 60'

alias xc='perl -e '"'"'$r = eval($ARGV[0]); printf "%d\n0x%x\n",$r,$r;'"'"''

alias xF='sh -c '"'"'pat=$1; shift; /usr/bin/find -L . -type f -iname "$pat" -print0 |xargs -0 "$@"'"'"' xF'
alias xD='sh -c '"'"'pat=$1; shift; /usr/bin/find -L . -type d -iname "$pat" -print0 |xargs -0 "$@"'"'"' xD'

alias gM='gcc -dM -E - < /dev/null'

alias 4cc='perl -e '"'"'$ARGV[0] =~ s/(.)/sprintf("%02x",ord($1))/egi; print $ARGV[0],"\n";'"'"''
alias un4cc='perl -e '"'"'$ARGV[0] =~ s/([0-9A-F]{2})/chr(hex($1))/egi; print $ARGV[0],"\n";'"'"''

alias vimless='/usr/share/vim/vim??/macros/less.sh'

alias urlConvMV='for f in *%*; do n="$(echo $f|unU|iconv -c -f euc-kr -t utf-8)"; echo "mv \"$f\" \"$n\""; done'

# 'shift' can make error
alias with-agent='exec ssh-agent /bin/sh -i -c '"'"' [ -z "$1" ] && l="exec ${SHELL:-/bin/sh} -i" || l="exec ""$@"; ssh-add; eval "$l"'"'"' with-agent'

alias L='sh -c '"'"'"$@" |less'"'"' L'

# bash_quine
# http://www.commandlinefu.com/commands/view/5589/bash-quine?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed:+Command-line-fu+(Command-Line-Fu)&utm_content=Google+Feedfetcher
# s='s=\47%s\47; printf "$s" "$s"'; printf "$s" "$s"
alias bash_quine='s='"'"'s=\47%s\47; printf "$s" "$s"'"'"'; printf "$s" "$s"'
alias pslist='sh -c '"'"'ps xa |grep "$1"'"'"' pslist'

alias cvs='cvs -q'

cvd(){(
  revopts=
  while [ ! -z "$1" ]; do
    case "$1" in
      -r|-D) revopts="$revopts '$1$2'"; shift; shift; ;;
      -r*|-D*) revopts="$revopts '$1'"; shift; ;;
      *) filename="$1"; shift; ;;
    esac
  done
  if [ -f "${filename}" ]; then
    tempname=$(echo ${filename} |sed -e "y/\/:/__/; s/^/cvd-/;")
    tempdir=${TMP-'/tmp'}
    mkdir -p ${tempdir}
    cmd="cvs update -p ${revopts} ${filename}"
    eval $cmd > ${tempdir}/${tempname}
    vim -d ${tempdir}/${tempname} ${filename}
  else
    echo "file not found: ${filename}"
  fi
  echo "Done: $cmd"
)}

ytd() { ID=$1 ; curl www.youtube.com/watch?v="$1" |sed 's/http/\ &/g;s/ /<\CR|\n>&/g;s/\"\,//g;s/\,[0-9]*\|//g' |awk '/http\:\/\/.*.itag\='$2'/{print "curl -C- -L -vvv \42"$1"\42 -o '$PWD'/youtube_'$ID'.flv"}' |unvis -h | unvis -h|sort -u | sh ;}

alias en2='enscript -2rj --line-numbers --media=A4 --margin=:36::72 -p output.ps '

alias objD='sh -c '"'"'objdump -bbinary -marmv4 -EL -D "$1" |exec less '"'"' objD'
alias objDB='sh -c '"'"'objdump -bbinary -marmv4 -EB -D "$1" |exec less '"'"' objD'

alias synergyto='sh -c '"'"'exec /usr/bin/synergyc --no-daemon --debug FATAL -n $(hostname) $1'"'"' synergyto'

alias lddA='sh -c '"'"'readelf -d "$@" | grep NEEDED'"'"' lddA'

alias lxargs="xargs -d '\n'"

alias gitdiffyesterday='git diff "@{yesterday}" --'

alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])"'
alias urldecode='python -c "import sys, urllib as ul; print ul.unquote_plus(sys.argv[1])"'

alias sqltime-php='php -r '\''echo date("Y-m-d H:i:s",$argv[1]) .PHP_EOL;'\'''
alias sqltime='sh -c '\'' sqlite /dev/null "SELECT datetime($3,$1,$2)" '\'' sqltime "'\''unixepoch'\''" "'\''localtime'\''"'

pdf2pngs(){(
  input="$1"
  if [ ! -f "$input" ]; then
    echo "$0:" Input file "$input" not found. stop. 1>&2
    return 1
  fi
  b=$(basename "$input" .pdf)
  d="$b"
  output="$b/$b-%03d.png"
  if [ -s "$output" ]; then
    echo "$0:" Output file "$output" already exists. stop. 1>&2
    return 1
  fi
  mkdir -p "$b"
  gs -q -P- -dBATCH -dNOPAUSE -sPAPERSIZE=a4 -sDEVICE=pngalpha -sOutputFile="$output" -r300 "$input"
)}

pdftune(){(
  if [ -z "$2" ]; then
    echo Usage: pdf_tune input_file output_file 1>&2
    return
  fi
  input="$1"
  output="$2"
  if [ ! -f "$input" ]; then
    echo "$0:" Input file "$input" not found. stop. 1>&2
    return 1
  fi
  if [ -s "$output" ]; then
    echo "$0:" Output file "$output" already exists. stop. 1>&2
    return 1
  fi

### # excerpt from: http://askubuntu.com/a/626301
### gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/default \
###     -dNOPAUSE -dQUIET -dBATCH -dDetectDuplicateImages \
###     -dCompressFonts=true -r150 \
###     -sOutputFile="$output" "$input"

# excerpt from: http://stackoverflow.com/a/10453202
# + http://stackoverflow.com/a/3387 + http://stackoverflow.com/a/626301
gs  -q -dNOPAUSE -dBATCH -dSAFER -dQUIET \
    -sDEVICE=pdfwrite \
    -dCompatibilityLevel=1.3 \
    -dPDFSETTINGS=/screen \
    -dCompressFonts=true -r150 \
    -dEmbedAllFonts=true \
    -dSubsetFonts=true \
    -dDownsampleColorImages=true \
    -dDownsampleGrayImages=true \
    -dDownsampleMonoImages=true \
    -dColorImageDownsampleType=/Bicubic \
    -dColorImageResolution=150 \
    -dGrayImageDownsampleType=/Bicubic \
    -dGrayImageResolution=150 \
    -dMonoImageDownsampleType=/Bicubic \
    -dMonoImageResolution=150 \
    -dDetectDuplicateImages=true \
    -sOutputFile="$output" \
     "$input"


## to extract embedded font:
##  -dEmbedAllFonts=false \
##  -dSubsetFonts=true \
##  -dConvertCMYKImagesToRGB=true \
##  -dCompressFonts=true \
##  -c ".setpdfwrite <</AlwaysEmbed [ ]>> setdistillerparams" \
##  -c ".setpdfwrite <</NeverEmbed [/Courier /Courier-Bold /Courier-Oblique /Courier-BoldOblique /Helvetica /Helvetica-Bold /Helvetica-Oblique /Helvetica-BoldOblique /Times-Roman /Times-Bold /Times-Italic /Times-BoldItalic /Symbol /ZapfDingbats /Arial]>> setdistillerparams" \


# to check more options later, see: http://ghostscript.com/doc/current/Ps2pdf.htm

)}

### bashy_basename(){
###   local name="${1##*/}"
###   echo "${name%$2}"
### }
### bashy_dirname(){
###   local dir="${1%${1##*/}}"
###   "${dir:=./}" != "/" && dir="${dir%?}"
###   echo "$dir"
### }
### bashy_namename(){
###   local name=${1##*/}
###   local name0="${name%.*}"
###   echo "${name0:-$name}"
### }
### bashy_ext(){
###   local name=${1##*/}
###   local name0="${name%.*}"
###   local ext=${name0:+${name#$name0}}
###   echo "${ext:-.}"
### }


#if pushd >/dev/null 2>&1; then
#    alias cd='pushd'
#    alias cd='eval _cd'
#    _cd(){
#	if [ -z "$0" ]; then echo cd;
#	elif [ "-" = "$1" ]; then echo popd;
#	else echo pushd "'$1'";
#	fi
#    }
#fi

alias g='pushd '
alias b='popd '
alias psx='sh -c '"'"'ps x "$@" |exec grep "^"'"'"' psx'

alias gtts='sh -c '"'"'curl -s -o- -A Mozilla --data-urlencode "q=$*" --data "ie=UTF-8" --data "tl=ko" "http://translate.google.com/translate_tts" |mpg123 -q -'"'"' gtts'
alias vimdirdiff='sh -c '\''vim -c "DirDiff $1 $2" '\'' vimdirdiff'

alias ff='sh -c '\''exec fgrep -nH "$@" * */* */*/* 2>/dev/null | tee /tmp/tt.$USER.log | fgrep --colour "$@" '\'' ff'
alias tt='sh -c '\''"$@" |exec tee /tmp/tt.$USER.log'\'' tt'

alias git-sync='git up;git commit -m. -a&&git push'
alias git-forget-and-sync='git fetch --all; git reset --hard origin/master; git pull'

alias git-sync-dotfiles=_git_sync_dotfiles
_git_sync_dotfiles(){(
  test -d ~/.local/etc/_ishrc && cd ~/.local/etc/_ishrc; git-sync
  test -d ~/.local/etc/profile.d && cd ~/.local/etc/profile.d; git-sync
)}

#XXX# incompatible, missing obs=, #alias dd='dc3dd --help >/dev/null 2>&1 && alias dd="dc3dd" ; dd'
#XXX# incompatible#alias dd='ddrescue --help >/dev/null 2>&1 && alias dd="ddrescue" ; dd'
alias dd='dcfldd --help >/dev/null 2>&1 && alias dd="dcfldd" ; dd'

alias rename-files=_rename_files
_rename_files(){(
  setopt shwordsplit 2>/dev/null
  dry_run=echo
  if [ "--no-dry-run" = "$1" ]; then dry_run="sh -x -c" ; shift ; fi
  if [ -z "$3" ]; then echo "Usage: rename_files [--no-dry-run] pattern replace files" 1>&2; return; fi
  pattern="$1"; shift
  replace="$1"; shift
  for f in "$@" ; do
    n="$( echo "$f" | sed -e 's#'"$pattern"'#'"$replace"'#g;' )"
    $dry_run "mv '$f' '$n'"
  done
  if [ "echo" == "$dry_run" ]; then
    echo "Dry-run completed: run with --no-dry-run at the first of the command line arguments to rename files really" 1>&2
  fi
)}

#alias kor='export LANG=$(locale -a |grep -i ko_KR.utf)'
alias kor='export LANG=ko_KR.UTF-8'
alias mosh='mosh --server='"'"'env LANG="$(locale -a|grep ko_KR.UTF-8||locale -a|grep .UTF-8|head -1)" mosh-server'"'"''

alias rsync-with-openelec='rsync --rsync-path="/storage/.kodi/addons/network.backup.rsync/bin/rsync" '

# multitail goodies
alias mt='multitail -p l'
alias mtj='multitail -p l -j'

# nosync
alias sync='echo -n "Sync? "; read yn; case $yn in [Yy]) /bin/sync;; esac;'

# prompt by git
alias git-branch-name=_git_branch_name
_git_branch_name(){
  git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3
}
alias git-branch-prompt=_git_branch_prompt
_git_branch_prompt(){
  local branch=`_git_branch_name`
  if [ $branch ]; then printf " [%s]" $branch; fi
}
#PS1="\u@\h \[\033[0;36m\]\W\[\033[0m\]\[\033[0;32m\]\$(_git_branch_prompt)\[\033[0m\] \$ "

# bash/zsh completion behavior simulation
alias zsh-like='if [ ! -z "$BASH_VERSION" ]; then bind "set show-all-if-ambiguous on" ; bind "TAB:menu-complete" ; fi'
alias bash-like='setopt autolist; unsetopt menucomplete; setopt noautomenu'

# lsof, find processes using a specific tcp port
alias lsof-port-listeners='_lsof_port_listeners'
_lsof_port_listeners(){(
    port=$1
    shift
    # disable uid, dns, port name resolv
    lsof -l -n -P -i:$port
)}

alias unzip-pl=_unzip_pl
_unzip_pl(){

### if [ ! -z "$BASH_VERSION" ]; then
###   # alt 1 - try bash <( ... )
### 
###   perl <(cat <<'EOF'
### use strict;
### use Encode;
### use Archive::Zip;
### binmode(STDOUT, ":utf8");
### my $zip = Archive::Zip->new();
### $zip->read($ARGV[0]) == 0 or
###    die "$0: couldn't read $ARGV[0]\n";
### foreach my $mref ($zip->members) {
###     my $n = decode("cp949",$mref->fileName);
###     print "Extracting $n\n";
###     $zip->extractMember($mref,$n) == 0 or
###    die "$0: couldn't extract $n\n";
### }
### EOF
### ) "$@"
### 
### else

  # alt 2 - try using literal

  perl -e '
use strict;
use Encode;
use Archive::Zip;
binmode(STDOUT, ":utf8");
my $zip = Archive::Zip->new();
$zip->read($ARGV[0]) == 0 or
   die "$0: couldn't read $ARGV[0]\n";
foreach my $mref ($zip->members) {
    my $n = decode("cp949",$mref->fileName);
    print "Extracting $n\n";
    $zip->extractMember($mref,$n) == 0 or
   die "$0: couldn't extract $n\n";
}
' "$@"

### fi

}

alias unzip-py=_unzip_py
_unzip_py(){
  # use <<- heredoc, to keep tab/indentation
  python - "@$" <<-"EOB"
#!/usr/bin/env python

# copied from http://stackoverflow.com/a/14981125/496899
from __future__ import print_function
import sys

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

# copied from http://stackoverflow.com/a/12886818/496899
import zipfile,os.path

def unzip(source_filename, dest_dir):
    with zipfile.ZipFile(source_filename) as zf:
        zf.debug = 3
        if False: ### if sys.version_info >= (2, 7, 4):
            # if python 2.7.4+, safe to use 'extractall'
            zf.extractall(dest_dir)  
        else:
            # iterate to avoid '..' security issue
            for member in zf.infolist():
                # Path traversal defense copied from
                # http://hg.python.org/cpython/file/tip/Lib/http/server.py#l789
                words = member.filename.split('/')
                path = dest_dir
                for word in words[:-1]:
                    drive, word = os.path.splitdrive(word)
                    head, word = os.path.split(word)
                    if word in (os.curdir, os.pardir, ''): continue
                    path = os.path.join(path, word)
                if not member.filename.endswith('/'):
                    eprint(member.filename)
                zf.extract(member, path)

if __name__ == '__main__':
    import sys
    if len(sys.argv)>2:
        unzip(sys.argv[1],sys.argv[2])
    else:
        unzip(sys.argv[1],'')
EOB
}

ifbw(){(

  delay=5
  if='eth0'
  capture='/tmp/net-dev-eth0.txt'
  netdev='/proc/net/dev'

  curr_rx=
  curr_tx=
  last_rx=
  last_tx=

  capture(){

      cat $netdev | fgrep $if':' | cut -c8- | awk '{print $1 " " $9}' > $capture
      curr_rx=$( cut -d' ' -f1 /tmp/net-dev-eth0.txt )
      curr_tx=$( cut -d' ' -f1 /tmp/net-dev-eth0.txt )

      if [ "--show" = "$1" ]; then
	  clear 2>/dev/null

	  echo '['$( date '+%Y-%m-%d %H:%M:%S' )']' $if':' \
	      rx: $( echo 'scale=1;' '(' $curr_rx - $last_rx ')' '*' 8 / 1024 / $delay | bc -l ) Kbps \
	      tx: $( echo 'scale=1;' '(' $curr_tx - $last_tx ')' '*' 8 / 1024 / $delay | bc -l ) Kbps
      fi

      last_rx=$curr_rx
      last_tx=$curr_tx

  }

  capture
  sleep $delay
  capture --show
  while [ "--loop" = "$1" ] ; do
      sleep $delay
      capture --show
  done

)}

alias chrome-debug-9222=_chrome_debug_9222
_chrome_debug_9222(){(
  mkdir -p /tmp/chrome
  google-chrome --remote-debugging-port=9222 --user-data-dir=/tmp/chrome --incognito
)}

alias chrome-proxy-5555=_chrome_proxy_5555
_chrome_proxy_5555(){(
  #google-chrome --proxy-server="http=http://127.0.0.1:5555;https=http://127.0.0.1:5555" "$@"
  env all_proxy=127.0.0.1:5555 google-chrome "$@"
)}

alias clear-menus=_clear_menus
_clear_menus(){(
  set -e
  cd ~/.local/share
  mkdir -p applications.bak
  mv -v applications/wine-*.desktop applications.bak
  cd ~/.config
  mkdir -p menus.bak
  mv -v menus/* menus.bak
)}

#alias psc='ps xawf -eo pid,user,cgroup,args'
alias psc='ps xaw -eo pid,user,cgroup,args'

alias wttr='curl http://wttr.in/ | less -r'

alias socat-forward-to-local=_socat_forward_to_local
_socat_forward_to_local(){(
  if [ -z "$2" ]; then
    echo "Usage: socat-forward-to-local port bind-addr" 1>&2
    return 1
  fi
  port=$1
  bind=$2
  socat TCP4-LISTEN:$port,bind=$bind,reuseaddr,fork TCP4:127.0.0.1:$port
)}

alias shuf-pl='perl -MList::Util=shuffle -e "print shuffle(<STDIN>);"'

alias sudo='sudo --set-home'

##########

if test -f $HOME/.mac-aliases; then . $HOME/.mac-aliases; fi
if test -f $HOME/.docker-aliases; then . $HOME/.docker-aliases; fi

##########

alias i='. $HOME/.ishrc'
alias ii='exec env -u TMOUT $SHELL --noprofile --rcfile $HOME/.ishrc -i'
