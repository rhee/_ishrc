:
\ls -F -w > /dev/null 2>&1 && alias ls='\ls -F -w'
\ls -NF --show-control-chars --color=auto > /dev/null 2>&1 && \
  alias ls='\ls -NF --show-control-chars'
alias Copy='\rsync -e ssh -avP'
alias cpV='rsync --partial --progress --append'
alias mvV='rsync --partial --progress --append --remove-sent-files'

alias rN='perl -e '"'"'$pat=shift@ARGV;for$f(@ARGV){eval"(\$ff=\$f)=~\$pat";$f ne$ff&&(!-f$ff&&rename $f,$ff&&print"rNF $f $ff\n"||warn "skip $f->$ff\n");}'"'"
alias rM='sh -c "mkdir -p $HOME/.Trash; /bin/mv \$* $HOME/.Trash" rM'
alias zap='perl -e "truncate \$ARGV[0],0"'
alias mkclean='echo -n "Purge " .#* *~ .??*~ " ?"; read ans; case "$ans" in [Yy]*) rm -fvr .\#* *~ .??*~; ;; esac'
alias mkxclean='xf=${TMP:-/tmp}/mkxc-$$; echo "Purge-recursively:"; /usr/bin/find -L . -name .\#\* -o -name \*~ -o -name .\?\?\*~ |tee $xf; echo "Purge above files?"; read ans; case "$ans" in [Yy]*) xargs rm -fvr $xf < $xf; ;; esac'
alias lsR~='/usr/bin/find . \( -name '"'"'*~'"'"' -o -name '"'"'#*'"'"' \) '
alias rmR~='/usr/bin/find . \( -name '"'"'*~'"'"' -o -name '"'"'#*'"'"' \) -print0 |xargs -0 rm -fv '

alias tart='tar tvvzf'
alias tarx='tar xvvzf'
alias tarc='tar cvvzf'

alias tF='sh -c '"'"'for f in "$@"; do echo "-F" "$f"; done |exec xargs tail'"'"' tF '

alias ko='export LANG=ko_KR.euckr'
alias u8='export LANG=ko_KR.utf8'

alias sl='screen -ls'
alias sx8='LANG=ko_KR.utf8 screen -U -x -r'

alias dC='d_=/tmp/dtach/$(id -u); mkdir -p $d_; env dC_sock_=$d_/sock dtach -c $d_/sock -z -r winch'
alias dA='d_=/tmp/dtach/$(id -u); if [ -S "$dC_sock_" ]; then echo "socket already attached"; else dtach -a $d_/sock -z -r winch; fi'

alias w3x='w3m -v -no-proxy'
alias fwman='sh -c "exec w3m http://www.FreeBSD.org/cgi/man.cgi\?query=\$1" fwman'

alias capmmf='sh -c '\''mplayer.static -vo null -ao null -dumpfile "cap_$(basename $1)" -dumpstream "$1"'\'' capmmf'
_mpPP(){ mplayer -quiet -autoq 100 -vf pp=de,hqdn3d,scale -vfm ffmpeg -fs -utf8 -shuffle "$@" </dev/null; }
alias mpPP=_mpPP
#_mpq(){ mplayer -quiet -noconfig user -osdlevel 3 -utf8 -shuffle -slang ko -alang ko -framedrop -fixed-vo -x 640 -y 360 "$@" </dev/null; }
#_mpq(){ mplayer -quiet -noconfig user -osdlevel 3 -utf8 -shuffle -slang ko -alang ko -framedrop -fixed-vo -xy 512 "$@" </dev/null; }
_mpq(){ mplayer -quiet -noconfig user -osdlevel 3 -utf8 -shuffle \
  -slang ko -alang ko \
  -framedrop \
  -fixed-vo -xy 960 \
  -autosync 30 \
  -nobps -ni -forceidx -mc 0 \
  -vfm ffmpeg -lavdopts lowres=1:fast:skiploopfilter=all \
  -cache 8192 \
  -vf mirror \
  "$@" </dev/null; }
alias mpq=_mpq

flac2mp3(){(
  if [ -z "$2" ]
  then
    echo "Usage: flac2mp3 input.flac output.mp3" 1>&2
    return -1
  fi
  input="$1"
  output="$2"
  ffmpeg -i "$input" -ab 320k -map_metadata 0 -id3v2_version 3 "$output"
)}

alias dR='sh -c "for h in \$*; do tar c -f - -C ~ -L .bashrc .ishrc .aliases .vimrc .vim .emacs .gitconfig .screenrc .tmux.conf | ssh $h tar xvf -; done" dR'

alias mutt='LANG=ko_KR.utf8 LC_ALL=ko_KR.utf8 mutt -n -f $HOME/Maildir'
alias muttkr='LANG=ko_KR.eucKR LC_ALL=ko_KR.eucKR mutt -F $HOME/.muttrc-euckr'

alias xc='perl -e '"'"'$r = eval($ARGV[0]); printf "%d\n0x%x\n",$r,$r;'"'"''

alias xF='sh -c '"'"'pat=$1; shift; /usr/bin/find -L . -type f -iname "$pat" -print0 |xargs -0 "$@"'"'"' xF'
alias xD='sh -c '"'"'pat=$1; shift; /usr/bin/find -L . -type d -iname "$pat" -print0 |xargs -0 "$@"'"'"' xD'

alias gM='gcc -dM -E - < /dev/null'

alias urlConvMV='for f in *%*; do n="$(echo $f|unU|iconv -c -f euc-kr -t utf-8)"; echo "mv \"$f\" \"$n\""; done'

# 'shift' can make error
alias with-agent='exec ssh-agent /bin/sh -i -c '"'"' [ -z "$1" ] && l="exec ${SHELL:-/bin/sh} -i" || l="exec ""$@"; ssh-add; eval "$l"'"'"' with-agent'

# bash_quine
# http://www.commandlinefu.com/commands/view/5589/bash-quine?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed:+Command-line-fu+(Command-Line-Fu)&utm_content=Google+Feedfetcher
# s='s=\47%s\47; printf "$s" "$s"'; printf "$s" "$s"
alias bash_quine='s='"'"'s=\47%s\47; printf "$s" "$s"'"'"'; printf "$s" "$s"'
alias pslist='sh -c '"'"'ps xa |grep "$1"'"'"' pslist'

ytd(){( local ID=$1 ; curl www.youtube.com/watch?v="$1" |sed 's/http/\ &/g;s/ /<\CR|\n>&/g;s/\"\,//g;s/\,[0-9]*\|//g' |awk '/http\:\/\/.*.itag\='$2'/{print "curl -C- -L -vvv \42"$1"\42 -o '$PWD'/youtube_'$ID'.flv"}' |unvis -h | unvis -h|sort -u | sh; )}

alias en2='enscript -2rj --line-numbers --media=A4 --margin=:36::72 -p output.ps '

alias synergyto='sh -c '"'"'exec /usr/bin/synergyc --no-daemon --debug FATAL -n $(hostname) $1'"'"' synergyto'

alias lxargs="xargs -d '\n'"

alias gitdiffyesterday='git diff "@{yesterday}" --'

sqltime(){(
    ts="$1"; shift
    if which sqlite3 >/dev/null 2>&1; then
	sqlite3 /dev/null "SELECT datetime('$ts','unixepoch','localtime')"
    elif php -v >/dev/null 2>&1; then
	php -r 'echo date("Y-m-d H:i:s",$argv[1]) .PHP_EOL;' "$ts"
    else
	echo "sqlite3 or php-cli required" 1>&2
	return 1
    fi
)}

pdf2pngs(){(
  input="$1"
  if [ ! -f "$input" ]; then
    echo "$0:" Input file "$input" not found. stop. 1>&2
    return 1
  fi
  b=$(basename "$input" .pdf)
  d="$b"
  output="$b/$b-%03d.png"
  if [ -s "$output" ]; then
    echo "$0:" Output file "$output" already exists. stop. 1>&2
    return 1
  fi
  mkdir -p "$b"
  gs -q -P- -dBATCH -dNOPAUSE -sPAPERSIZE=a4 -sDEVICE=pngalpha -sOutputFile="$output" -r300 "$input"
)}

pdftune(){(
  if [ -z "$2" ]; then
    echo Usage: pdf_tune input_file output_file 1>&2
    return
  fi
  input="$1"
  output="$2"
  if [ ! -f "$input" ]; then
    echo "$0:" Input file "$input" not found. stop. 1>&2
    return 1
  fi
  if [ -s "$output" ]; then
    echo "$0:" Output file "$output" already exists. stop. 1>&2
    return 1
  fi

### # excerpt from: http://askubuntu.com/a/626301
### gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/default \
###     -dNOPAUSE -dQUIET -dBATCH -dDetectDuplicateImages \
###     -dCompressFonts=true -r150 \
###     -sOutputFile="$output" "$input"

# excerpt from: http://stackoverflow.com/a/10453202
# + http://stackoverflow.com/a/3387 + http://stackoverflow.com/a/626301
gs  -q -dNOPAUSE -dBATCH -dSAFER -dQUIET \
    -sDEVICE=pdfwrite \
    -dCompatibilityLevel=1.3 \
    -dPDFSETTINGS=/screen \
    -dCompressFonts=true -r150 \
    -dEmbedAllFonts=true \
    -dSubsetFonts=true \
    -dDownsampleColorImages=true \
    -dDownsampleGrayImages=true \
    -dDownsampleMonoImages=true \
    -dColorImageDownsampleType=/Bicubic \
    -dColorImageResolution=150 \
    -dGrayImageDownsampleType=/Bicubic \
    -dGrayImageResolution=150 \
    -dMonoImageDownsampleType=/Bicubic \
    -dMonoImageResolution=150 \
    -dDetectDuplicateImages=true \
    -sOutputFile="$output" \
     "$input"

## to extract embedded font:
##  -dEmbedAllFonts=false \
##  -dSubsetFonts=true \
##  -dConvertCMYKImagesToRGB=true \
##  -dCompressFonts=true \
##  -c ".setpdfwrite <</AlwaysEmbed [ ]>> setdistillerparams" \
##  -c ".setpdfwrite <</NeverEmbed [/Courier /Courier-Bold /Courier-Oblique /Courier-BoldOblique /Helvetica /Helvetica-Bold /Helvetica-Oblique /Helvetica-BoldOblique /Times-Roman /Times-Bold /Times-Italic /Times-BoldItalic /Symbol /ZapfDingbats /Arial]>> setdistillerparams" \

# to check more options later, see: http://ghostscript.com/doc/current/Ps2pdf.htm

)}

### bashy_basename(){
###   local name="${1##*/}"
###   echo "${name%$2}"
### }
### bashy_dirname(){
###   local dir="${1%${1##*/}}"
###   "${dir:=./}" != "/" && dir="${dir%?}"
###   echo "$dir"
### }
### bashy_namename(){
###   local name=${1##*/}
###   local name0="${name%.*}"
###   echo "${name0:-$name}"
### }
### bashy_ext(){
###   local name=${1##*/}
###   local name0="${name%.*}"
###   local ext=${name0:+${name#$name0}}
###   echo "${ext:-.}"
### }


#if pushd >/dev/null 2>&1; then
#    alias cd='pushd'
#    alias cd='eval _cd'
#    _cd(){
#	if [ -z "$0" ]; then echo cd;
#	elif [ "-" = "$1" ]; then echo popd;
#	else echo pushd "'$1'";
#	fi
#    }
#fi

alias g='pushd '
alias b='popd '
alias psx='sh -c '"'"'ps x "$@" |exec grep "^"'"'"' psx'

alias gtts='sh -c '"'"'curl -s -o- -A Mozilla --data-urlencode "q=$*" --data "ie=UTF-8" --data "tl=ko" "http://translate.google.com/translate_tts" |mpg123 -q -'"'"' gtts'
DirDiff(){(
  lfile="$1"
  rfile="$2"
  vim -c 'DirDiff '"$1"' '"$2"' '
)}

alias ff='sh -c '\''exec fgrep -nH "$@" * */* */*/* 2>/dev/null | tee /tmp/tt.$USER.log | fgrep --colour "$@" '\'' ff'
alias tt='sh -c '\''"$@" |exec tee /tmp/tt.$USER.log'\'' tt'

#alias git-sync='git up;git commit -m. -a&&git push'
alias git-sync='git remote update -p; git merge --ff-only @{u}; git commit -m. -a&&git push'
alias git-forget-and-sync='git fetch --all; git reset --hard origin/master; git pull'

git_sync_dotfiles(){(
  test -d ~/.local/etc/_ishrc && cd ~/.local/etc/_ishrc; git-sync
  test -d ~/.local/etc/profile.d && cd ~/.local/etc/profile.d; git-sync
)}

#XXX# incompatible, missing obs=, #alias dd='dc3dd --help >/dev/null 2>&1 && alias dd="dc3dd" ; dd'
#XXX# incompatible#alias dd='ddrescue --help >/dev/null 2>&1 && alias dd="ddrescue" ; dd'
alias dd='dcfldd --help >/dev/null 2>&1 && alias dd="dcfldd" ; dd'

rename_files(){(
  setopt shwordsplit 2>/dev/null
  dry_run=echo
  if [ "--no-dry-run" = "$1" ]; then dry_run="sh -x -c" ; shift ; fi
  if [ -z "$3" ]; then echo "Usage: rename_files [--no-dry-run] pattern replace files" 1>&2; return; fi
  pattern="$1"; shift
  replace="$1"; shift
  for f in "$@" ; do
    n="$( echo "$f" | sed -e 's#'"$pattern"'#'"$replace"'#g;' )"
    $dry_run "mv '$f' '$n'"
  done
  if [ "echo" = "$dry_run" ]; then
    echo "Dry-run completed: run with --no-dry-run at the first of the command line arguments to rename files really" 1>&2
  fi
)}

# nosync
alias sync='echo -n "Sync? "; read yn; case $yn in [Yy]) /bin/sync;; esac;'

alias rsync-with-openelec='rsync --rsync-path="/storage/.kodi/addons/network.backup.rsync/bin/rsync" '
alias rsync-with-mac='rsync --iconv=utf-8,utf-8-mac'

# multitail goodies
alias mt='multitail -p l'
alias mtj='multitail -p l -j'

# prompt by git
git_branch_name(){ git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3; }
git_branch_prompt(){ local branch=`_git_branch_name`; if [ $branch ]; then printf " [%s]" $branch; fi; }
#PS1="\u@\h \[\033[0;36m\]\W\[\033[0m\]\[\033[0;32m\]\$(_git_branch_prompt)\[\033[0m\] \$ "

unzip_pl(){

### if [ ! -z "$BASH_VERSION" ]; then
###   # alt 1 - try bash <( ... )
###
###   perl <(cat <<'EOF'
### use strict;
### use Encode;
### use Archive::Zip;
### binmode(STDOUT, ":utf8");
### my $zip = Archive::Zip->new();
### $zip->read($ARGV[0]) == 0 or
###    die "$0: couldn't read $ARGV[0]\n";
### foreach my $mref ($zip->members) {
###     my $n = decode("cp949",$mref->fileName);
###     print "Extracting $n\n";
###     $zip->extractMember($mref,$n) == 0 or
###    die "$0: couldn't extract $n\n";
### }
### EOF
### ) "$@"
###
### else

  # alt 2 - try using literal

  perl -e '
use strict;
use Encode;
use Archive::Zip;
binmode(STDOUT, ":utf8");
my $zip = Archive::Zip->new();
$zip->read($ARGV[0]) == 0 or
   die "$0: could not read $ARGV[0]\n";
foreach my $mref ($zip->members) {
    my $n = decode("cp949",$mref->fileName);
    print "Extracting $n\n";
    $zip->extractMember($mref,$n) == 0 or
   die "$0: could not extract $n\n";
}
' "$@"

### fi

}

unzip_py(){
  # use <<- heredoc, to keep tab/indentation
  python - "$@" <<-"EOB"
#!/usr/bin/env python
# coding: utf-8

# copied from http://stackoverflow.com/a/14981125/496899
from __future__ import print_function
import sys

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

# copied from http://stackoverflow.com/a/12886818/496899
import zipfile,os.path

def unzip(source_filename, dest_dir):
    with zipfile.ZipFile(source_filename) as zf:
        zf.debug = 3
        if False: ### if sys.version_info >= (2, 7, 4):
            # if python 2.7.4+, safe to use 'extractall'
            zf.extractall(dest_dir)
        else:
            # iterate to avoid '..' security issue
            for member in zf.infolist():
                # Path traversal defense copied from
                # http://hg.python.org/cpython/file/tip/Lib/http/server.py#l789
                words = member.filename.split('/')
                path = dest_dir
                for word in words[:-1]:
                    drive, word = os.path.splitdrive(word)
                    head, word = os.path.split(word)
                    if word in (os.curdir, os.pardir, ''): continue
                    path = os.path.join(path, word)
                if not member.filename.endswith('/'):
                    eprint(member.filename)
                zf.extract(member, path)

if __name__ == '__main__':
    import sys
    if len(sys.argv)>2:
        unzip(sys.argv[1],sys.argv[2])
    else:
        unzip(sys.argv[1],'')
EOB
}

ifbw(){(

  delay=5
  if='eth0'
  capture='/tmp/net-dev-eth0.txt'
  netdev='/proc/net/dev'

  curr_rx=
  curr_tx=
  last_rx=
  last_tx=

  capture(){

      cat $netdev | fgrep $if':' | cut -c8- | awk '{print $1 " " $9}' > $capture
      curr_rx=$( cut -d' ' -f1 /tmp/net-dev-eth0.txt )
      curr_tx=$( cut -d' ' -f1 /tmp/net-dev-eth0.txt )

      if [ "--show" = "$1" ]; then
	  clear 2>/dev/null

	  echo '['$( date '+%Y-%m-%d %H:%M:%S' )']' $if':' \
	      rx: $( echo 'scale=1;' '(' $curr_rx - $last_rx ')' '*' 8 / 1024 / $delay | bc -l ) Kbps \
	      tx: $( echo 'scale=1;' '(' $curr_tx - $last_tx ')' '*' 8 / 1024 / $delay | bc -l ) Kbps
      fi

      last_rx=$curr_rx
      last_tx=$curr_tx

  }

  capture
  sleep $delay
  capture --show
  while [ "--loop" = "$1" ] ; do
      sleep $delay
      capture --show
  done

)}

clear_menus(){(
  set -e
  cd ~/.local/share
  mkdir -p applications.bak
  mv -v applications/wine-*.desktop applications.bak
  cd ~/.config
  mkdir -p menus.bak
  mv -v menus/* menus.bak
)}

#alias psc='ps xawf -eo pid,user,cgroup,args'
alias psc='ps xaw -eo pid,user,cgroup,args'

alias L='sh -c '"'"'"$@" 2>&1 |less -r'"'"' L'
#alias ldpkg='less /var/lib/dpkg/available'
alias ldpkg='L cat /var/lib/dpkg/available'
#alias wttr='curl http://wttr.in/ | less -r'
alias wttr='L curl http://wttr.in/'

alias shuf-pl='perl -MList::Util=shuffle -e "print shuffle(<STDIN>);"'

alias y2j='python -c "import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)"'
alias j2y='python -c "import sys, yaml, json; yaml.safe_dump(json.load(sys.stdin), sys.stdout, default_flow_style=False)"'

less_csv(){ cat "$@" | column -s, -t | less -#2 -N -S; }

sshfs_better(){ sshfs "$@" -o reconnect,ServerAliveInterval=15,ServerAliveCountMax=3; }

openssl_showcerts(){
  test ! -z "$1" || ( echo "Usage: openssl-showcerts <file-path|host[:port]>" 1>&2; return )
  if [ -f "$1" ] # is file?
  then
    case "$1" in
      *.pfx|*.p12) # pkcs#12 format
        openssl pkcs12 -info -in "$1"
        ;;
      *) # assume pem format
        openssl x509 -in "$1" -text
        ;;
    esac
  else
    #openssl s_client -showcerts -connect "$1" < /dev/null | less
    L openssl s_client -showcerts -connect "$1" < /dev/null
  fi
}

function dirdiff()
{(
    # Shell-escape each path:
    DIR1=$(printf '%q' "$1"); shift
    DIR2=$(printf '%q' "$1"); shift
    vim $@ -c "DirDiff $DIR1 $DIR2"
)}
